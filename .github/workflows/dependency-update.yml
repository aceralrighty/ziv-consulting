name: Dependency Security Check and Auto-Update

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.12.2'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit and generate report
        id: audit
        run: |
          # Create audit report
          echo "# Security Audit Report" > audit-report.md
          echo "Generated on: $(date)" >> audit-report.md
          echo "" >> audit-report.md
          
          # Run audit and capture output
          if npm audit --audit-level=moderate --production --json > audit-output.json; then
            echo "No vulnerabilities found at moderate level or above." >> audit-report.md
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
          else
            echo "## Vulnerabilities Found" >> audit-report.md
            echo "" >> audit-report.md
          
            # Parse JSON output for better formatting
            node -e "
              const audit = JSON.parse(require('fs').readFileSync('audit-output.json', 'utf8'));
              if (audit.vulnerabilities) {
                Object.entries(audit.vulnerabilities).forEach(([pkg, vuln]) => {
                  console.log(\`### \${pkg}\`);
                  console.log(\`- Severity: \${vuln.severity}\`);
                  console.log(\`- Via: \${vuln.via.map(v => typeof v === 'string' ? v : v.name).join(', ')}\`);
                  if (vuln.fixAvailable) {
                    console.log(\`- Fix available: \${typeof vuln.fixAvailable === 'boolean' ? 'Yes' : vuln.fixAvailable.name}\`);
                  }
                  console.log('');
                });
              }
            " >> audit-report.md
          
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing security issue
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        id: check-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,dependencies',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security Vulnerabilities Detected')
            );
            
            return existingIssue ? existingIssue.number : null;

      - name: Create or update security issue
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = fs.readFileSync('audit-report.md', 'utf8');
            const existingIssueNumber = ${{ steps.check-issue.outputs.result }};
            
            const issueBody = `${auditReport}
            
            ## Next Steps
            1. Review the vulnerabilities above
            2. Run \`npm audit fix\` to automatically fix issues where possible
            3. For vulnerabilities that can't be auto-fixed, consider:
               - Updating to a newer version of the package
               - Finding alternative packages
               - Accepting the risk if the vulnerability doesn't affect your use case
            
            **Auto-generated by GitHub Actions**`;
            
            if (existingIssueNumber) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssueNumber,
                body: `## Updated Security Audit Report\n\n${issueBody}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Security Vulnerabilities Detected',
                body: issueBody,
                labels: ['security', 'dependencies', 'high-priority']
              });
            }

      - name: Upload audit report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.md
          retention-days: 30

  auto-merge-dependabot:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Setup Node.js for tests
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        uses: actions/setup-node@v4
        with:
          node-version: '20.12.2'
          cache: 'npm'

      - name: Install dependencies and run tests
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          npm ci
          npm run build
          # Add your test command here if you have tests
          # npm test

      - name: Auto-merge patch updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-approve minor updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}